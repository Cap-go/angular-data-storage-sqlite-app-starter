{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Capacitor } from '@capacitor/core';\nimport { CapacitorDataStorageSqlite } from 'capacitor-data-storage-sqlite';\nimport * as i0 from \"@angular/core\";\nexport let StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {\n      this.isService = false;\n    }\n    /**\n     * Plugin Initialization\n     */\n\n\n    init() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.platform = Capacitor.getPlatform();\n        this.store = CapacitorDataStorageSqlite;\n        this.isService = true;\n      });\n    }\n    /**\n     * Echo a value\n     * @param value\n     */\n\n\n    echo(value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            return yield this.store.echo({\n              value\n            });\n          } catch (err) {\n            console.log(`Error ${err}`);\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"openStore: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Open a Store\n     * @param _dbName string optional\n     * @param _table string optional\n     * @param _encrypted boolean optional\n     * @param _mode string optional\n     */\n\n\n    openStore(_dbName, _table, _encrypted, _mode) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          const database = _dbName ? _dbName : \"storage\";\n          const table = _table ? _table : \"storage_table\";\n          const encrypted = _encrypted ? _encrypted : false;\n          const mode = _mode ? _mode : \"no-encryption\";\n\n          try {\n            console.log(\"in openStore Service \");\n            console.log(`database ${database}`);\n            console.log(`table ${table}`);\n            yield this.store.openStore({\n              database,\n              table,\n              encrypted,\n              mode\n            });\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"openStore: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Close a store\n     * @param dbName\n     * @returns\n     */\n\n\n    closeStore(dbName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            yield this.store.closeStore({\n              database: dbName\n            });\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"close: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Check if a store is opened\n     * @param dbName\n     * @returns\n     */\n\n\n    isStoreOpen(dbName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const ret = yield this.store.isStoreOpen({\n              database: dbName\n            });\n            return Promise.resolve(ret);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"isStoreOpen: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Check if a store already exists\n     * @param dbName\n     * @returns\n     */\n\n\n    isStoreExists(dbName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const ret = yield this.store.isStoreExists({\n              database: dbName\n            });\n            return Promise.resolve(ret);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"isStoreExists: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Create/Set a Table\n     * @param table string\n     */\n\n\n    setTable(table) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            yield this.store.setTable({\n              table\n            });\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"setTable: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Set of Key\n     * @param key string\n     * @param value string\n     */\n\n\n    setItem(key, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (key.length > 0) {\n            try {\n              yield this.store.set({\n                key,\n                value\n              });\n              return Promise.resolve();\n            } catch (err) {\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"setItem: Must give a key\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"setItem: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Get the Value for a given Key\n     * @param key string\n     */\n\n\n    getItem(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (key.length > 0) {\n            try {\n              const {\n                value\n              } = yield this.store.get({\n                key\n              });\n              console.log(\"in getItem value \", value);\n              return Promise.resolve(value);\n            } catch (err) {\n              console.log(`$$$$$ in getItem key: ${key} err: ${JSON.stringify(err)}`);\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"getItem: Must give a key\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"getItem: Store not opened\"));\n        }\n      });\n    }\n\n    isKey(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (key.length > 0) {\n            try {\n              const {\n                result\n              } = yield this.store.iskey({\n                key\n              });\n              return Promise.resolve(result);\n            } catch (err) {\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"isKey: Must give a key\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"isKey: Store not opened\"));\n        }\n      });\n    }\n\n    getAllKeys() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const {\n              keys\n            } = yield this.store.keys();\n            return Promise.resolve(keys);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"getAllKeys: Store not opened\"));\n        }\n      });\n    }\n\n    getAllValues() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const {\n              values\n            } = yield this.store.values();\n            return Promise.resolve(values);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"getAllValues: Store not opened\"));\n        }\n      });\n    }\n\n    getFilterValues(filter) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const {\n              values\n            } = yield this.store.filtervalues({\n              filter\n            });\n            return Promise.resolve(values);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"getFilterValues: Store not opened\"));\n        }\n      });\n    }\n\n    getAllKeysValues() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const {\n              keysvalues\n            } = yield this.store.keysvalues();\n            return Promise.resolve(keysvalues);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"getAllKeysValues: Store not opened\"));\n        }\n      });\n    }\n\n    removeItem(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (key.length > 0) {\n            try {\n              yield this.store.remove({\n                key\n              });\n              return Promise.resolve();\n            } catch (err) {\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"removeItem: Must give a key\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"removeItem: Store not opened\"));\n        }\n      });\n    }\n\n    clear() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            yield this.store.clear();\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"clear: Store not opened\"));\n        }\n      });\n    }\n\n    deleteStore(_dbName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const database = _dbName ? _dbName : \"storage\";\n        yield this.init();\n\n        if (this.isService && this.store != null) {\n          try {\n            yield this.store.deleteStore({\n              database\n            });\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"deleteStore: Store not opened\"));\n        }\n      });\n    }\n\n    isTable(table) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (table.length > 0) {\n            try {\n              const {\n                result\n              } = yield this.store.isTable({\n                table\n              });\n              return Promise.resolve(result);\n            } catch (err) {\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"isTable: Must give a table\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"isTable: Store not opened\"));\n        }\n      });\n    }\n\n    getAllTables() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            const {\n              tables\n            } = yield this.store.tables();\n            return Promise.resolve(tables);\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(\"getAllTables: Store not opened\"));\n        }\n      });\n    }\n\n    deleteTable(table) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          if (table.length > 0) {\n            try {\n              yield this.store.deleteTable({\n                table\n              });\n              return Promise.resolve();\n            } catch (err) {\n              return Promise.reject(new Error(err.message));\n            }\n          } else {\n            return Promise.reject(new Error(\"deleteTable: Must give a table\"));\n          }\n        } else {\n          return Promise.reject(new Error(\"deleteTable: Store not opened\"));\n        }\n      });\n    }\n    /**\n     * Is Json Object Valid\n     * @param jsonstring Check the validity of a given Json Object\n     */\n\n\n    isJsonValid(jsonstring) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            return Promise.resolve(yield this.store.isJsonValid({\n              jsonstring\n            }));\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(`no store open`));\n        }\n      });\n    }\n    /**\n     * Import from a Json Object\n     * @param jsonstring\n     */\n\n\n    importFromJson(jsonstring) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            return Promise.resolve(yield this.store.importFromJson({\n              jsonstring\n            }));\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(`no store open`));\n        }\n      });\n    }\n    /**\n     * Export to a Json Object\n     */\n\n\n    exportToJson() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.isService && this.store != null) {\n          try {\n            return Promise.resolve(yield this.store.exportToJson());\n          } catch (err) {\n            return Promise.reject(new Error(err.message));\n          }\n        } else {\n          return Promise.reject(new Error(`no store open`));\n        }\n      });\n    }\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();","map":null,"metadata":{},"sourceType":"module"}