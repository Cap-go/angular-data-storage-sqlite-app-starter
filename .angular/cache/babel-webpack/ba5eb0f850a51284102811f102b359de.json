{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-data-storage-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//import LocalForage from 'jeep-localforage';\nimport localForage from 'localforage';\nimport { Data } from './Data'; //const DATABASE: string = \"storageIDB\";\n//const STORAGESTORE: string = \"storage_store\";\n\nexport class StorageDatabaseHelper {\n  constructor(dbName, tableName) {\n    this._db = null;\n    const res = this.openStore(dbName, tableName);\n\n    if (res) {\n      this._dbName = dbName;\n      this._tableName = tableName;\n    } else {\n      this._dbName = '';\n      this._tableName = '';\n      throw new Error('openStore return false');\n    }\n  }\n\n  openStore(dbName, tableName) {\n    let ret = false;\n    const config = this.setConfig(dbName, tableName);\n    this._db = localForage.createInstance(config);\n\n    if (this._db != null) {\n      this._dbName = dbName;\n      ret = true;\n    }\n\n    return ret;\n  }\n\n  setConfig(dbName, tableName) {\n    const config = {\n      name: dbName,\n      storeName: tableName,\n      driver: [localForage.INDEXEDDB, localForage.WEBSQL],\n      version: 1\n    };\n    return config;\n  }\n\n  setTable(tableName) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const res = _this.openStore(_this._dbName, tableName);\n\n      if (res) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject(new Error('openStore return false'));\n      }\n    })();\n  }\n\n  isTable(table) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._db == null) {\n        return Promise.reject(`isTable: this.db is null`);\n      }\n\n      try {\n        let ret = false;\n        const tables = yield _this2.tables();\n        if (tables.includes(table)) ret = true;\n        return Promise.resolve(ret);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  tables() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        // Let us open our database\n        const DBOpenRequest = window.indexedDB.open(_this3._dbName); // these two event handlers act on the database being opened successfully, or not\n\n        DBOpenRequest.onerror = () => {\n          return reject(`Error loading database ${_this3._dbName}`);\n        };\n\n        DBOpenRequest.onsuccess = () => {\n          let result = [];\n          const db = DBOpenRequest.result;\n          const retList = db.objectStoreNames;\n          const values = Object.values(retList);\n\n          for (const val of values) {\n            if (val.substring(0, 12) != 'local-forage') {\n              result = [...result, val];\n            }\n          }\n\n          return resolve(result);\n        };\n      });\n    })();\n  }\n\n  set(data) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this4._db.setItem(data.name, data.value);\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  get(name) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const value = yield _this5._db.getItem(name);\n        const data = new Data();\n        data.name = name;\n        data.value = value;\n        return Promise.resolve(data);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  remove(name) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6._db.removeItem(name).then(() => {\n        return Promise.resolve();\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  clear() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7._db.clear().then(() => {\n        return Promise.resolve();\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  keys() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this8._db.keys().then(keys => {\n        return Promise.resolve(keys);\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  values() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const values = [];\n      return _this9._db.iterate(value => {\n        values.push(value);\n      }).then(() => {\n        return Promise.resolve(values);\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  keysvalues() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const keysvalues = [];\n      return _this10._db.iterate((value, key) => {\n        const data = new Data();\n        data.name = key;\n        data.value = value;\n        keysvalues.push(data);\n      }).then(() => {\n        return Promise.resolve(keysvalues);\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  iskey(name) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this11.get(name).then(data => {\n        if (data.value != null) {\n          return Promise.resolve(true);\n        } else {\n          return Promise.resolve(false);\n        }\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    })();\n  }\n\n  importJson(values) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      let changes = 0;\n\n      for (const val of values) {\n        try {\n          const data = new Data();\n          data.name = val.key;\n          data.value = val.value;\n          yield _this12.set(data);\n          changes += 1;\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      return Promise.resolve(changes);\n    })();\n  }\n\n  exportJson() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const retJson = {};\n      const prevTableName = _this13._tableName;\n\n      try {\n        retJson.database = _this13._dbName.slice(0, -3);\n        retJson.encrypted = false;\n        retJson.tables = []; // get the table list\n\n        const tables = yield _this13.tables();\n\n        for (const table of tables) {\n          _this13._tableName = table;\n          const retTable = {};\n          retTable.name = table;\n          retTable.values = [];\n\n          const res = _this13.openStore(_this13._dbName, _this13._tableName);\n\n          if (res) {\n            const dataTable = yield _this13.keysvalues();\n\n            for (const tdata of dataTable) {\n              const retData = {};\n\n              if (tdata.name != null) {\n                retData.key = tdata.name;\n                retData.value = tdata.value;\n                retTable.values = [...retTable.values, retData];\n              } else {\n                return Promise.reject('Data.name is undefined');\n              }\n            }\n\n            retJson.tables = [...retJson.tables, retTable];\n          } else {\n            const msg = `Could not open ${_this13._dbName} ${_this13._tableName} `;\n            _this13._tableName = prevTableName;\n            return Promise.reject(msg);\n          }\n        }\n\n        _this13._tableName = prevTableName;\n\n        const res = _this13.openStore(_this13._dbName, _this13._tableName);\n\n        if (res) {\n          return Promise.resolve(retJson);\n        } else {\n          const msg = `Could not open ${_this13._dbName} ${_this13._tableName} `;\n          return Promise.reject(msg);\n        }\n      } catch (err) {\n        _this13._tableName = prevTableName;\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n} //# sourceMappingURL=StorageDatabaseHelper.js.map","map":null,"metadata":{},"sourceType":"module"}