{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/store.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let MultitablesstoreComponent = /*#__PURE__*/(() => {\n  class MultitablesstoreComponent {\n    constructor(_StoreService) {\n      this._StoreService = _StoreService;\n      this.isService = false;\n      this.store = null;\n    }\n    /*******************************\n     * Component Lifecycle Methods *\n     *******************************/\n\n\n    ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._showAlert = message => __awaiter(this, void 0, void 0, function* () {\n          yield Dialog.alert({\n            title: 'Error Dialog',\n            message: message\n          });\n        }); // Initialize the CapacitorDataStorageSQLite plugin\n\n\n        yield this._StoreService.init();\n        this.platform = this._StoreService.platform;\n      });\n    }\n    /*******************************\n    * Component Methods           *\n    *******************************/\n\n\n    runTests() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._cardStorage = document.querySelector('.card-multitablesstore');\n\n        if (this._StoreService.isService) {\n          // reset the Dom in case of multiple runs\n          yield this.resetStorageDisplay();\n\n          try {\n            yield this.testMultiTablesStore();\n            document.querySelector('.multitables-store-success1').classList.remove('display');\n          } catch (err) {\n            document.querySelector('.multitables-store-failure1').classList.remove('display');\n            yield this._showAlert(err.message);\n          }\n        } else {\n          console.log(\"Service is not initialized\");\n          document.querySelector('.multitables-store-failure1').classList.remove('display');\n          yield this._showAlert(\"Service is not initialized\");\n        }\n      });\n    }\n\n    testMultiTablesStore() {\n      return __awaiter(this, void 0, void 0, function* () {\n        //populate some data\n        //string\n        console.log('in testMultiTablesStore ***** ');\n\n        try {\n          yield this._StoreService.openStore(\"myStore\", \"saveData\");\n          yield this._StoreService.clear(); // store data in the \"saveData\" table\n\n          yield this._StoreService.setItem(\"app\", \"App Opened\");\n          let result = yield this._StoreService.getItem(\"app\");\n\n          if (result != \"App Opened\") {\n            return Promise.reject(new Error(\"app failed\"));\n          } // json\n\n\n          let data = {\n            'age': 40,\n            'name': 'jeep',\n            'email': 'jeep@example.com'\n          };\n          yield this._StoreService.setItem(\"user\", JSON.stringify(data));\n          result = yield this._StoreService.getItem(\"user\");\n\n          if (result != JSON.stringify(data)) {\n            return Promise.reject(new Error(\"user failed\"));\n          } // set a new table \"otherData\"\n\n\n          yield this._StoreService.setTable(\"otherData\");\n          yield this._StoreService.clear(); // store data in the \"saveData\" table\n\n          yield this._StoreService.setItem(\"key1\", \"Hello World\");\n          result = yield this._StoreService.getItem(\"key1\");\n\n          if (result != \"Hello World\") {\n            return Promise.reject(new Error(\"key1 failed\"));\n          } // json\n\n\n          let data1 = {\n            'a': 60,\n            'pi': '3.141516',\n            'b': 'cool'\n          };\n          yield this._StoreService.setItem(\"key2\", JSON.stringify(data1));\n          result = yield this._StoreService.getItem(\"key2\");\n\n          if (result != JSON.stringify(data1)) {\n            return Promise.reject(new Error(\"key2 failed\"));\n          } // store new data in \"saveData\" table\n\n\n          yield this._StoreService.setTable(\"saveData\");\n          yield this._StoreService.setItem(\"message\", \"Welcome from Jeep\");\n          result = yield this._StoreService.getItem(\"message\");\n\n          if (result != \"Welcome from Jeep\") {\n            return Promise.reject(new Error(\"message failed\"));\n          } // test getAllKeysValues\n\n\n          result = yield this._StoreService.getAllKeysValues();\n          console.log(`getAllKeysValues result: ${JSON.stringify(result)}`);\n\n          if (result.length != 3 || result[0].key != \"app\" || result[0].value != \"App Opened\" || result[1].key != \"message\" || result[1].value != \"Welcome from Jeep\" || result[2].key != \"user\" || result[2].value != JSON.stringify(data)) {\n            return Promise.reject(new Error(\"getAllKeysValues failed\"));\n          } // test isTable\n\n\n          if (this.platform !== \"web\") {\n            result = yield this._StoreService.isTable(\"saveData\");\n            console.log(\"isTable saveData \" + result);\n\n            if (!result) {\n              return Promise.reject(new Error(\"isTable saveData failed\"));\n            }\n\n            result = yield this._StoreService.isTable(\"foo\");\n            console.log(\"isTable foo \" + result);\n\n            if (result) {\n              return Promise.reject(new Error(\"isTable foo failed\"));\n            } // test getAllTables\n\n\n            result = yield this._StoreService.getAllTables();\n            console.log(\"Get tables result: \" + result);\n\n            if (result.length != 2 || !result.includes(\"saveData\") || !result.includes(\"otherData\")) {\n              return Promise.reject(new Error(\"getAllTables 1 failed\"));\n            } // test deleteTable\n\n\n            yield this._StoreService.deleteTable(\"otherData\"); // test getAllTables\n\n            result = yield this._StoreService.getAllTables();\n            console.log(\"Get tables result: \" + result);\n\n            if (result.length != 1 || !result.includes(\"saveData\")) {\n              return Promise.reject(new Error(\"getAllTables 2 failed\"));\n            } // test if \"myStore\" is opened\n\n\n            result = yield this._StoreService.isStoreOpen(\"myStore\");\n            if (result) yield this._StoreService.closeStore(\"myStore\"); // check if \"myStore\" exists\n\n            result = yield this._StoreService.isStoreExists(\"myStore\");\n\n            if (!result.result) {\n              return Promise.reject(new Error(\"isStoreExists 1 failed\"));\n            } // delete the Store \n\n\n            yield this._StoreService.deleteStore(\"myStore\"); // check if \"myStore\" exists\n\n            result = yield this._StoreService.isStoreExists(\"myStore\");\n\n            if (result.result) {\n              return Promise.reject(new Error(\"isStoreExists 2 failed\"));\n            }\n          }\n\n          console.log('in testMultiTablesStore end ***** ');\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(new Error(err.message));\n        }\n      });\n    }\n\n    resetStorageDisplay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < this._cardStorage.childElementCount; i++) {\n          if (!this._cardStorage.children[i].classList.contains('display')) this._cardStorage.children[i].classList.add('display');\n        }\n      });\n    }\n\n  }\n\n  MultitablesstoreComponent.ɵfac = function MultitablesstoreComponent_Factory(t) {\n    return new (t || MultitablesstoreComponent)(i0.ɵɵdirectiveInject(i1.StoreService));\n  };\n\n  MultitablesstoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MultitablesstoreComponent,\n    selectors: [[\"app-multitables-store\"]],\n    decls: 9,\n    vars: 0,\n    consts: [[\"expand\", \"block\", 3, \"click\"], [1, \"card-multitablesstore\"], [1, \"multitables-store-success1\", \"display\"], [1, \"multitables-store-failure1\", \"display\"]],\n    template: function MultitablesstoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-list\");\n        i0.ɵɵelementStart(1, \"ion-item\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function MultitablesstoreComponent_Template_ion_button_click_2_listener() {\n          return ctx.runTests();\n        });\n        i0.ɵɵtext(3, \"Multi Tables Store\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-card\", 1);\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵtext(6, \" The MultiTablesStore test was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"p\", 3);\n        i0.ɵɵtext(8, \" The MultiTablesStore test failed\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i2.IonList, i2.IonItem, i2.IonButton, i2.IonCard],\n    styles: [\".hidden[_ngcontent-%COMP%]{visibility:hidden}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return MultitablesstoreComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}