{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/store.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TeststoreComponent = /*#__PURE__*/(() => {\n  class TeststoreComponent {\n    constructor(_StoreService) {\n      this._StoreService = _StoreService;\n      this.isService = false;\n      this.store = null;\n    }\n    /*******************************\n     * Component Lifecycle Methods *\n     *******************************/\n\n\n    ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._showAlert = message => __awaiter(this, void 0, void 0, function* () {\n          yield Dialog.alert({\n            title: 'Error Dialog',\n            message: message\n          });\n        }); // Initialize the CapacitorDataStorageSQLite plugin\n\n\n        yield this._StoreService.init();\n      });\n    }\n    /*******************************\n    * Component Methods           *\n    *******************************/\n\n\n    runTests() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._cardStorage = document.querySelector('.card-storage');\n\n        if (this._StoreService.isService) {\n          // reset the Dom in case of multiple runs\n          yield this.resetStorageDisplay();\n\n          try {\n            yield this.testFirstStore();\n            document.querySelector('.store-success1').classList.remove('display');\n          } catch (err) {\n            document.querySelector('.store-failure1').classList.remove('display');\n            yield this._showAlert(err.message);\n          }\n        } else {\n          console.log(\"Service is not initialized\");\n          document.querySelector('.store-failure1').classList.remove('display');\n          yield this._showAlert(\"Service is not initialized\");\n        }\n      });\n    }\n\n    testFirstStore() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const echo = yield this._StoreService.echo(\"Hello from Jeep\");\n        console.log(`echo: ${echo.value}`); //populate some data\n        //string\n\n        console.log('in testFirstStore ***** ');\n\n        try {\n          yield this._StoreService.openStore(\"\");\n          yield this._StoreService.clear(); // store data in the first store\n\n          yield this._StoreService.setItem(\"session\", \"Session 'Opened\");\n          let result = yield this._StoreService.getItem(\"session\");\n\n          if (result != \"Session 'Opened\") {\n            return Promise.reject(new Error(\"session failed\"));\n          } // json\n\n\n          let data = {\n            'a': 20,\n            'b': 'Hello World',\n            'c': {\n              'c1': 40,\n              'c2': 'cool'\n            }\n          };\n          yield this._StoreService.setItem(\"testJson\", JSON.stringify(data));\n          result = yield this._StoreService.getItem(\"testJson\");\n\n          if (result != JSON.stringify(data)) {\n            return Promise.reject(new Error(\"testJson failed\"));\n          } // number\n\n\n          let data1 = 243.567;\n          yield this._StoreService.setItem(\"testNumber\", data1.toString());\n          result = yield this._StoreService.getItem(\"testNumber\");\n          console.log(`result testNumber result ${result}`);\n\n          if (result != data1.toString()) {\n            return Promise.reject(new Error(\"testNumber failed\"));\n          } // getting a value from a non existing key\n\n\n          result = yield this._StoreService.getItem(\"foo\");\n          console.log(`getItem foo result.length ${result.length}`);\n\n          if (result.length > 0) {\n            return Promise.reject(new Error(\"test non existing key failed\"));\n          } // test isKey\n\n\n          result = yield this._StoreService.isKey(\"testNumber\");\n          console.log(\"isKey testNumber \" + result);\n\n          if (!result) {\n            return Promise.reject(new Error(\"isKey testNumber failed\"));\n          }\n\n          result = yield this._StoreService.isKey(\"foo\");\n          console.log(\"isKey foo \" + result);\n\n          if (result) {\n            return Promise.reject(new Error(\"isKey foo failed\"));\n          } // test getAllKeys\n\n\n          result = yield this._StoreService.getAllKeys();\n          console.log(`Get keys result: ${result}`);\n\n          if (result.length != 3 || result[0] != \"session\" || result[1] != \"testJson\" || result[2] != \"testNumber\") {\n            return Promise.reject(new Error(\"getAllKeys failed\"));\n          } // Update session\n          // store data in the first store\n\n\n          yield this._StoreService.setItem(\"session\", \"Session 'Opened' updated\");\n          result = yield this._StoreService.getItem(\"session\");\n\n          if (result != \"Session 'Opened' updated\") {\n            return Promise.reject(new Error(\"session failed\"));\n          } // test getAllValues\n\n\n          result = yield this._StoreService.getAllValues();\n          console.log(\"Get values : \" + result);\n\n          if (result.length != 3 || result[0] != \"Session 'Opened' updated\" || result[1] != JSON.stringify(data) || result[2] != data1.toString()) {\n            return Promise.reject(new Error(\"getAllValues failed\"));\n          } // test getAllKeysValues\n\n\n          result = yield this._StoreService.getAllKeysValues();\n\n          if (result.length != 3 || result[0].key != \"session\" || result[0].value != \"Session 'Opened' updated\" || result[1].key != \"testJson\" || result[1].value != JSON.stringify(data) || result[2].key != \"testNumber\" || result[2].value != data1.toString()) {\n            return Promise.reject(new Error(\"getAllKeysValues failed\"));\n          } // test removeItem\n\n\n          yield this._StoreService.removeItem(\"testJson\");\n          result = yield this._StoreService.getAllKeysValues();\n\n          if (result.length != 2 || result[0].key != \"session\" || result[0].value != \"Session 'Opened' updated\" || result[1].key != \"testNumber\" || result[1].value != data1.toString()) {\n            return Promise.reject(new Error(\"getAllKeysValues failed after removeItem\"));\n          } // test clear\n\n\n          yield this._StoreService.clear();\n          result = yield this._StoreService.getAllKeysValues();\n\n          if (result.length != 0) {\n            return Promise.reject(new Error(\"getAllKeysValues failed after clear\"));\n          } // close the store\n\n\n          if (this.platform === \"android\" || this.platform === \"ios\") {\n            yield this._StoreService.closeStore(\"storage\");\n          }\n\n          console.log('in testFirstStore end ***** ');\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(new Error(err.message));\n        }\n      });\n    }\n\n    resetStorageDisplay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < this._cardStorage.childElementCount; i++) {\n          if (!this._cardStorage.children[i].classList.contains('display')) this._cardStorage.children[i].classList.add('display');\n        }\n      });\n    }\n\n  }\n\n  TeststoreComponent.ɵfac = function TeststoreComponent_Factory(t) {\n    return new (t || TeststoreComponent)(i0.ɵɵdirectiveInject(i1.StoreService));\n  };\n\n  TeststoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TeststoreComponent,\n    selectors: [[\"app-teststore\"]],\n    decls: 9,\n    vars: 0,\n    consts: [[\"expand\", \"block\", 3, \"click\"], [1, \"card-storage\"], [1, \"store-success1\", \"display\"], [1, \"store-failure1\", \"display\"]],\n    template: function TeststoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-list\");\n        i0.ɵɵelementStart(1, \"ion-item\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function TeststoreComponent_Template_ion_button_click_2_listener() {\n          return ctx.runTests();\n        });\n        i0.ɵɵtext(3, \"Store Test\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-card\", 1);\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵtext(6, \" The DataStore test was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"p\", 3);\n        i0.ɵɵtext(8, \" The DataStore test failed\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i2.IonList, i2.IonItem, i2.IonButton, i2.IonCard],\n    styles: [\".hidden[_ngcontent-%COMP%]{visibility:hidden}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TeststoreComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}