{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/store.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let FilterKeysComponent = /*#__PURE__*/(() => {\n  class FilterKeysComponent {\n    constructor(_StoreService) {\n      this._StoreService = _StoreService;\n      this.isService = false;\n      this.store = null;\n    }\n    /*******************************\n     * Component Lifecycle Methods *\n     *******************************/\n\n\n    ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Initialize the CapacitorDataStorageSQLite plugin\n        this._showAlert = message => __awaiter(this, void 0, void 0, function* () {\n          yield Dialog.alert({\n            title: 'Error Dialog',\n            message: message\n          });\n        });\n\n        yield this._StoreService.init();\n      });\n    }\n    /*******************************\n    * Component Methods           *\n    *******************************/\n\n\n    runTests() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._cardStorage = document.querySelector('.card-filter');\n\n        if (this._StoreService.isService) {\n          // reset the Dom in case of multiple runs\n          yield this.resetStorageDisplay();\n\n          try {\n            yield this.testFilterKeys();\n            document.querySelector('.filter-success1').classList.remove('display');\n          } catch (err) {\n            document.querySelector('.filter-failure1').classList.remove('display');\n            yield this._showAlert(err.message);\n          }\n        } else {\n          console.log(\"Service is not initialized\");\n          document.querySelector('.filter-failure1').classList.remove('display');\n          yield this._showAlert(\"Service is not initialized\");\n        }\n      });\n    }\n\n    testFilterKeys() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('in testFilterKeys start ***** ');\n\n        try {\n          yield this._StoreService.openStore(\"filterStore\", \"filterData\");\n          yield this._StoreService.clear(); // store data in the filter store\n\n          yield this._StoreService.setItem(\"session\", \"Session Lowercase Opened\");\n          let json = {\n            'a': 20,\n            'b': 'Hello World',\n            'c': {\n              'c1': 40,\n              'c2': 'cool'\n            }\n          };\n          yield this._StoreService.setItem(\"testJson\", JSON.stringify(json));\n          yield this._StoreService.setItem(\"Session1\", \"Session Uppercase 1 Opened\");\n          yield this._StoreService.setItem(\"MySession2foo\", \"Session Uppercase 2 Opened\");\n          const num = 243.567;\n          yield this._StoreService.setItem(\"testNumber\", num.toString());\n          yield this._StoreService.setItem(\"Mylsession2foo\", \"Session Lowercase 2 Opened\");\n          yield this._StoreService.setItem(\"EnduSession\", \"Session Uppercase End Opened\");\n          yield this._StoreService.setItem(\"Endlsession\", \"Session Lowercase End Opened\");\n          yield this._StoreService.setItem(\"SessionReact\", \"Session React Opened\"); // Get All Values\n\n          const values = yield this._StoreService.getAllValues();\n\n          if (values.length != 9) {\n            return Promise.reject(new Error(\"getAllValues failed\"));\n          } else {\n            for (let i = 0; i < values.length; i++) {\n              console.log(' key[' + i + \"] = \" + values[i] + \"\\n\");\n            }\n          } // Get Filter Values Starting with \"session\"\n\n\n          const stValues = yield this._StoreService.getFilterValues(\"%session\");\n\n          if (stValues.length != 3) {\n            return Promise.reject(new Error(\"getFilterValues Start failed\"));\n          } else {\n            for (let i = 0; i < stValues.length; i++) {\n              console.log(' key[' + i + \"] = \" + stValues[i] + \"\\n\");\n            }\n          } // Get Filter Values Ending with \"session\"\n\n\n          const endValues = yield this._StoreService.getFilterValues(\"session%\");\n\n          if (endValues.length != 3) {\n            return Promise.reject(new Error(\"getFilterValues End failed\"));\n          } else {\n            for (let i = 0; i < endValues.length; i++) {\n              console.log(' key[' + i + \"] = \" + endValues[i] + \"\\n\");\n            }\n          } // Get Filter Values Containing \"session\"\n\n\n          const contValues = yield this._StoreService.getFilterValues(\"session\");\n\n          if (contValues.length != 7) {\n            return Promise.reject(new Error(\"getFilterValues End failed\"));\n          } else {\n            for (let i = 0; i < contValues.length; i++) {\n              console.log(' key[' + i + \"] = \" + contValues[i] + \"\\n\");\n            }\n          } // close the store\n\n\n          if (this.platform === \"android\" || this.platform === \"ios\") {\n            yield this._StoreService.closeStore(\"filterStore\");\n          }\n\n          console.log('in testFilterKeys end ***** ');\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(new Error(err.message));\n        }\n      });\n    }\n\n    resetStorageDisplay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < this._cardStorage.childElementCount; i++) {\n          if (!this._cardStorage.children[i].classList.contains('display')) this._cardStorage.children[i].classList.add('display');\n        }\n      });\n    }\n\n  }\n\n  FilterKeysComponent.ɵfac = function FilterKeysComponent_Factory(t) {\n    return new (t || FilterKeysComponent)(i0.ɵɵdirectiveInject(i1.StoreService));\n  };\n\n  FilterKeysComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FilterKeysComponent,\n    selectors: [[\"app-filterkeys\"]],\n    decls: 9,\n    vars: 0,\n    consts: [[\"expand\", \"block\", 3, \"click\"], [1, \"card-filter\"], [1, \"filter-success1\", \"display\"], [1, \"filter-failure1\", \"display\"]],\n    template: function FilterKeysComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-list\");\n        i0.ɵɵelementStart(1, \"ion-item\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function FilterKeysComponent_Template_ion_button_click_2_listener() {\n          return ctx.runTests();\n        });\n        i0.ɵɵtext(3, \"FilterKeys Test\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-card\", 1);\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵtext(6, \" The FilterKeys test was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"p\", 3);\n        i0.ɵɵtext(8, \" The FilterKeys test failed\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i2.IonList, i2.IonItem, i2.IonButton, i2.IonCard],\n    styles: [\".hidden[_ngcontent-%COMP%]{visibility:hidden}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return FilterKeysComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}