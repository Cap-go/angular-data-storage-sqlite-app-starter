{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/store.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TestjsonComponent = /*#__PURE__*/(() => {\n  class TestjsonComponent {\n    constructor(_StoreService) {\n      this._StoreService = _StoreService;\n      this.isService = false;\n      this.store = null;\n    }\n    /*******************************\n     * Component Lifecycle Methods *\n     *******************************/\n\n\n    ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._showAlert = message => __awaiter(this, void 0, void 0, function* () {\n          yield Dialog.alert({\n            title: 'Error Dialog',\n            message: message\n          });\n        }); // Initialize the CapacitorDataStorageSQLite plugin\n\n\n        yield this._StoreService.init();\n      });\n    }\n    /*******************************\n    * Component Methods           *\n    *******************************/\n\n\n    runTests() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._cardStorage = document.querySelector('.card-storage');\n\n        if (this._StoreService.isService) {\n          // reset the Dom in case of multiple runs\n          this.platform = this._StoreService.platform;\n          yield this.resetStorageDisplay();\n\n          try {\n            yield this.testJson();\n            document.querySelector('.json-success1').classList.remove('display');\n          } catch (err) {\n            document.querySelector('.json-failure1').classList.remove('display');\n            yield this._showAlert(err.message);\n          }\n        } else {\n          console.log(\"Service is not initialized\");\n          document.querySelector('.json-failure1').classList.remove('display');\n          yield this._showAlert(\"Service is not initialized\");\n        }\n      });\n    }\n\n    testJson() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const echo = yield this._StoreService.echo(\"Hello from Jeep\");\n        console.log(`echo: ${echo.value}`); //populate some data\n        //string\n\n        console.log('in testJsonStore ***** ');\n        const jsonData1 = {\n          database: \"testImport\",\n          encrypted: false,\n          tables: [{\n            name: \"myStore1\",\n            values: [{\n              key: \"test1\",\n              value: \"my first test\"\n            }, {\n              key: \"test2\",\n              value: JSON.stringify({\n                a: 10,\n                b: 'my second test',\n                c: {\n                  k: 'hello',\n                  l: 15\n                }\n              })\n            }]\n          }, {\n            name: \"myStore2\",\n            values: [{\n              key: \"test1\",\n              value: \"my first test in store2\"\n            }, {\n              key: \"test2\",\n              value: JSON.stringify({\n                a: 20,\n                b: 'my second test in store2 ',\n                d: {\n                  k: 'hello',\n                  l: 15\n                }\n              })\n            }, {\n              key: \"test3\",\n              value: \"100\"\n            }]\n          }]\n        };\n        const jsonData2 = {\n          database: \"testJsonEncrypted\",\n          encrypted: true,\n          tables: [{\n            name: \"myStore1\",\n            values: [{\n              key: \"etest1\",\n              value: \"my first test\"\n            }, {\n              key: \"etest2\",\n              value: JSON.stringify({\n                a: 10,\n                b: 'my second test',\n                c: {\n                  k: 'hello',\n                  l: 15\n                }\n              })\n            }]\n          }, {\n            name: \"myStore2\",\n            values: [{\n              key: \"etest1\",\n              value: \"my first test in store2\"\n            }, {\n              key: \"etest2\",\n              value: JSON.stringify({\n                a: 20,\n                b: 'my second test in store2 ',\n                d: {\n                  k: 'hello',\n                  l: 15\n                }\n              })\n            }, {\n              key: \"etest3\",\n              value: \"100\"\n            }]\n          }]\n        };\n\n        try {\n          const bRet = yield this._StoreService.isJsonValid(JSON.stringify(jsonData1));\n\n          if (!bRet.result) {\n            return Promise.reject(new Error(\"json object jsonData1 not valid\"));\n          }\n\n          console.log(`$$$ jsonData1: ${JSON.stringify(jsonData1)}`);\n          yield this._StoreService.importFromJson(JSON.stringify(jsonData1));\n          yield this._StoreService.openStore(\"testImport\", \"myStore1\"); // test isKey\n\n          let result = yield this._StoreService.isKey(\"test1\");\n          console.log(\"isKey test1 \" + result);\n\n          if (!result) {\n            return Promise.reject(new Error(\"isKey testImport test1 failed\"));\n          }\n\n          result = yield this._StoreService.isKey(\"test2\");\n          console.log(\"isKey test2 \" + result);\n\n          if (!result) {\n            return Promise.reject(new Error(\"isKey test2 failed\"));\n          } // test getAllKeys\n\n\n          let resKeys = yield this._StoreService.getAllKeys();\n          console.log(`Get keys result: ${resKeys}`);\n\n          if (resKeys.length != 2 || resKeys[0] != \"test1\" || resKeys[1] != \"test2\") {\n            return Promise.reject(new Error(\"getAllKeys failed\"));\n          } // test getAllValues\n\n\n          let resValues = yield this._StoreService.getAllValues();\n          console.log(\"Get values : \" + resValues);\n\n          if (resValues.length != 2 || resValues[0] != \"my first test\" || resValues[1] != JSON.stringify({\n            a: 10,\n            b: 'my second test',\n            c: {\n              k: 'hello',\n              l: 15\n            }\n          })) {\n            return Promise.reject(new Error(\"getAllValues failed\"));\n          } // get store 2\n\n\n          yield this._StoreService.setTable(\"myStore2\"); // test getAllKeys\n\n          resKeys = yield this._StoreService.getAllKeys();\n          console.log(`Get keys result: ${resKeys}`);\n\n          if (resKeys.length != 3 || resKeys[0] != \"test1\" || resKeys[1] != \"test2\" || resKeys[2] != \"test3\") {\n            return Promise.reject(new Error(\"getAllKeys failed\"));\n          } // test getAllValues\n\n\n          resValues = yield this._StoreService.getAllValues();\n          console.log(\"Get values : \" + resValues);\n\n          if (resValues.length != 3 || resValues[0] != \"my first test in store2\" || resValues[1] != JSON.stringify({\n            a: 20,\n            b: 'my second test in store2 ',\n            d: {\n              k: 'hello',\n              l: 15\n            }\n          }) || resValues[2] != \"100\") {\n            return Promise.reject(new Error(\"getAllValues failed\"));\n          } // close the store\n\n\n          if (this.platform != \"web\") {\n            yield this._StoreService.closeStore(\"testImport\");\n          } // exportToJson\n\n\n          yield this._StoreService.openStore(\"testImport\", \"myStore1\");\n          const retJson = yield this._StoreService.exportToJson();\n          console.log(`retJson ${JSON.stringify(retJson.export)}`);\n\n          if (retJson.export.tables.length != 2 || retJson.export.tables[0].name != \"myStore1\" || retJson.export.tables[0].values.length != 2 || retJson.export.tables[1].name != \"myStore2\" || retJson.export.tables[1].values.length != 3) {\n            return Promise.reject(new Error(\"exportToJson failed\"));\n          }\n\n          const bRetEx = yield this._StoreService.isJsonValid(JSON.stringify(retJson.export));\n\n          if (!bRetEx.result) {\n            return Promise.reject(new Error(\"returned exported json object not valid\"));\n          }\n\n          const tables = yield this._StoreService.getAllTables();\n\n          if (tables.length != 2 || tables[0] != \"myStore1\" || tables[1] != \"myStore2\") {\n            return Promise.reject(new Error(\"getAllTables failed\"));\n          }\n\n          let res = yield this._StoreService.isTable(\"myStore1\");\n\n          if (!res) {\n            return Promise.reject(new Error(\"isTable myStore1 failed\"));\n          }\n\n          res = yield this._StoreService.isTable(\"myFoo\");\n\n          if (res) {\n            return Promise.reject(new Error(\"isTable myFoo failed\"));\n          }\n\n          resValues = yield this._StoreService.getAllValues();\n          console.log(\"Get values : \" + resValues);\n\n          if (resValues.length != 2 || resValues[0] != \"my first test\" || resValues[1] != JSON.stringify({\n            a: 10,\n            b: 'my second test',\n            c: {\n              k: 'hello',\n              l: 15\n            }\n          })) {\n            return Promise.reject(new Error(\"getAllValues failed\"));\n          }\n\n          if (this.platform === \"ios\" || this.platform === \"android\") {\n            // test encrypted\n            const bERet = yield this._StoreService.isJsonValid(JSON.stringify(jsonData2));\n\n            if (!bERet.result) {\n              return Promise.reject(new Error(\"json object jsonData2 not valid\"));\n            }\n\n            console.log(`$$$ jsonData2: ${JSON.stringify(jsonData2)}`);\n            yield this._StoreService.importFromJson(JSON.stringify(jsonData2));\n            yield this._StoreService.openStore(\"testJsonEncrypted\", \"myStore1\", true, \"secret\"); // test isKey\n\n            let resultE = yield this._StoreService.isKey(\"etest1\");\n            console.log(\"isKey etest1 encrypted\" + resultE);\n\n            if (!resultE) {\n              return Promise.reject(new Error(\"isKey etest1 encrypted failed\"));\n            }\n\n            resultE = yield this._StoreService.isKey(\"etest2\");\n            console.log(\"isKey etest2 encrypted\" + resultE);\n\n            if (!resultE) {\n              return Promise.reject(new Error(\"isKey etest2 encrypted failed\"));\n            } // test getAllKeys\n\n\n            let resKeysE = yield this._StoreService.getAllKeys();\n            console.log(`Get keys encrypted: ${resKeysE}`);\n\n            if (resKeysE.length != 2 || resKeysE[0] != \"etest1\" || resKeysE[1] != \"etest2\") {\n              return Promise.reject(new Error(\"getAllKeys encrypted failed\"));\n            } // test getAllValues\n\n\n            let resValuesE = yield this._StoreService.getAllValues();\n            console.log(\"Get values encrypted: \" + resValuesE);\n\n            if (resValuesE.length != 2 || resValuesE[0] != \"my first test\" || resValuesE[1] != JSON.stringify({\n              a: 10,\n              b: 'my second test',\n              c: {\n                k: 'hello',\n                l: 15\n              }\n            })) {\n              return Promise.reject(new Error(\"getAllValues failed\"));\n            }\n\n            yield this._StoreService.closeStore(\"testJsonEncrypted\");\n          }\n\n          console.log('in testJsonStore end ***** ');\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(new Error(err.message));\n        }\n      });\n    }\n\n    resetStorageDisplay() {\n      return __awaiter(this, void 0, void 0, function* () {\n        for (let i = 0; i < this._cardStorage.childElementCount; i++) {\n          if (!this._cardStorage.children[i].classList.contains('display')) this._cardStorage.children[i].classList.add('display');\n        }\n      });\n    }\n\n  }\n\n  TestjsonComponent.ɵfac = function TestjsonComponent_Factory(t) {\n    return new (t || TestjsonComponent)(i0.ɵɵdirectiveInject(i1.StoreService));\n  };\n\n  TestjsonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestjsonComponent,\n    selectors: [[\"app-testjson\"]],\n    decls: 9,\n    vars: 0,\n    consts: [[\"expand\", \"block\", 3, \"click\"], [1, \"card-storage\"], [1, \"json-success1\", \"display\"], [1, \"json-failure1\", \"display\"]],\n    template: function TestjsonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-list\");\n        i0.ɵɵelementStart(1, \"ion-item\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function TestjsonComponent_Template_ion_button_click_2_listener() {\n          return ctx.runTests();\n        });\n        i0.ɵɵtext(3, \"Json Test\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-card\", 1);\n        i0.ɵɵelementStart(5, \"p\", 2);\n        i0.ɵɵtext(6, \" The DataStore json test was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"p\", 3);\n        i0.ɵɵtext(8, \" The DataStore json test failed\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i2.IonList, i2.IonItem, i2.IonButton, i2.IonCard],\n    styles: [\".hidden[_ngcontent-%COMP%]{visibility:hidden}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestjsonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}