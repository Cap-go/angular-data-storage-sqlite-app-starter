{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-data-storage-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*! Capacitor: https://capacitorjs.com/ - MIT License */\nconst createCapacitorPlatforms = win => {\n  const defaultPlatformMap = new Map();\n  defaultPlatformMap.set('web', {\n    name: 'web'\n  });\n  const capPlatforms = win.CapacitorPlatforms || {\n    currentPlatform: {\n      name: 'web'\n    },\n    platforms: defaultPlatformMap\n  };\n\n  const addPlatform = (name, platform) => {\n    capPlatforms.platforms.set(name, platform);\n  };\n\n  const setPlatform = name => {\n    if (capPlatforms.platforms.has(name)) {\n      capPlatforms.currentPlatform = capPlatforms.platforms.get(name);\n    }\n  };\n\n  capPlatforms.addPlatform = addPlatform;\n  capPlatforms.setPlatform = setPlatform;\n  return capPlatforms;\n};\n\nconst initPlatforms = win => win.CapacitorPlatforms = createCapacitorPlatforms(win);\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\n\n\nconst CapacitorPlatforms = /*#__PURE__*/initPlatforms(typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\n\nconst addPlatform = CapacitorPlatforms.addPlatform;\n/**\n * @deprecated Set `CapacitorCustomPlatform` on the window object prior to runtime executing in the web app instead\n */\n\nconst setPlatform = CapacitorPlatforms.setPlatform;\n\nconst legacyRegisterWebPlugin = (cap, webPlugin) => {\n  var _a;\n\n  const config = webPlugin.config;\n  const Plugins = cap.Plugins;\n\n  if (!config || !config.name) {\n    // TODO: add link to upgrade guide\n    throw new Error(`Capacitor WebPlugin is using the deprecated \"registerWebPlugin()\" function, but without the config. Please use \"registerPlugin()\" instead to register this web plugin.\"`);\n  } // TODO: add link to upgrade guide\n\n\n  console.warn(`Capacitor plugin \"${config.name}\" is using the deprecated \"registerWebPlugin()\" function`);\n\n  if (!Plugins[config.name] || ((_a = config === null || config === void 0 ? void 0 : config.platforms) === null || _a === void 0 ? void 0 : _a.includes(cap.getPlatform()))) {\n    // Add the web plugin into the plugins registry if there already isn't\n    // an existing one. If it doesn't already exist, that means\n    // there's no existing native implementation for it.\n    // - OR -\n    // If we already have a plugin registered (meaning it was defined in the native layer),\n    // then we should only overwrite it if the corresponding web plugin activates on\n    // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n    Plugins[config.name] = webPlugin;\n  }\n};\n\nvar ExceptionCode = /*#__PURE__*/(() => {\n  (function (ExceptionCode) {\n    /**\n     * API is not implemented.\n     *\n     * This usually means the API can't be used because it is not implemented for\n     * the current platform.\n     */\n    ExceptionCode[\"Unimplemented\"] = \"UNIMPLEMENTED\";\n    /**\n     * API is not available.\n     *\n     * This means the API can't be used right now because:\n     *   - it is currently missing a prerequisite, such as network connectivity\n     *   - it requires a particular platform or browser version\n     */\n\n    ExceptionCode[\"Unavailable\"] = \"UNAVAILABLE\";\n  })(ExceptionCode || (ExceptionCode = {}));\n\n  return ExceptionCode;\n})();\n\nclass CapacitorException extends Error {\n  constructor(message, code) {\n    super(message);\n    this.message = message;\n    this.code = code;\n  }\n\n}\n\nconst getPlatformId = win => {\n  var _a, _b;\n\n  if (win === null || win === void 0 ? void 0 : win.androidBridge) {\n    return 'android';\n  } else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {\n    return 'ios';\n  } else {\n    return 'web';\n  }\n};\n\nconst createCapacitor = win => {\n  var _a, _b, _c, _d, _e;\n\n  const capCustomPlatform = win.CapacitorCustomPlatform || null;\n  const cap = win.Capacitor || {};\n  const Plugins = cap.Plugins = cap.Plugins || {};\n  /**\n   * @deprecated Use `capCustomPlatform` instead, default functions like registerPlugin will function with the new object.\n   */\n\n  const capPlatforms = win.CapacitorPlatforms;\n\n  const defaultGetPlatform = () => {\n    return capCustomPlatform !== null ? capCustomPlatform.name : getPlatformId(win);\n  };\n\n  const getPlatform = ((_a = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _a === void 0 ? void 0 : _a.getPlatform) || defaultGetPlatform;\n\n  const defaultIsNativePlatform = () => getPlatform() !== 'web';\n\n  const isNativePlatform = ((_b = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _b === void 0 ? void 0 : _b.isNativePlatform) || defaultIsNativePlatform;\n\n  const defaultIsPluginAvailable = pluginName => {\n    const plugin = registeredPlugins.get(pluginName);\n\n    if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {\n      // JS implementation available for the current platform.\n      return true;\n    }\n\n    if (getPluginHeader(pluginName)) {\n      // Native implementation available.\n      return true;\n    }\n\n    return false;\n  };\n\n  const isPluginAvailable = ((_c = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _c === void 0 ? void 0 : _c.isPluginAvailable) || defaultIsPluginAvailable;\n\n  const defaultGetPluginHeader = pluginName => {\n    var _a;\n\n    return (_a = cap.PluginHeaders) === null || _a === void 0 ? void 0 : _a.find(h => h.name === pluginName);\n  };\n\n  const getPluginHeader = ((_d = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _d === void 0 ? void 0 : _d.getPluginHeader) || defaultGetPluginHeader;\n\n  const handleError = err => win.console.error(err);\n\n  const pluginMethodNoop = (_target, prop, pluginName) => {\n    return Promise.reject(`${pluginName} does not have an implementation of \"${prop}\".`);\n  };\n\n  const registeredPlugins = new Map();\n\n  const defaultRegisterPlugin = (pluginName, jsImplementations = {}) => {\n    const registeredPlugin = registeredPlugins.get(pluginName);\n\n    if (registeredPlugin) {\n      console.warn(`Capacitor plugin \"${pluginName}\" already registered. Cannot register plugins twice.`);\n      return registeredPlugin.proxy;\n    }\n\n    const platform = getPlatform();\n    const pluginHeader = getPluginHeader(pluginName);\n    let jsImplementation;\n\n    const loadPluginImplementation = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (!jsImplementation && platform in jsImplementations) {\n          jsImplementation = typeof jsImplementations[platform] === 'function' ? jsImplementation = yield jsImplementations[platform]() : jsImplementation = jsImplementations[platform];\n        } else if (capCustomPlatform !== null && !jsImplementation && 'web' in jsImplementations) {\n          jsImplementation = typeof jsImplementations['web'] === 'function' ? jsImplementation = yield jsImplementations['web']() : jsImplementation = jsImplementations['web'];\n        }\n\n        return jsImplementation;\n      });\n\n      return function loadPluginImplementation() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    const createPluginMethod = (impl, prop) => {\n      var _a, _b;\n\n      if (pluginHeader) {\n        const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find(m => prop === m.name);\n\n        if (methodHeader) {\n          if (methodHeader.rtype === 'promise') {\n            return options => cap.nativePromise(pluginName, prop.toString(), options);\n          } else {\n            return (options, callback) => cap.nativeCallback(pluginName, prop.toString(), options, callback);\n          }\n        } else if (impl) {\n          return (_a = impl[prop]) === null || _a === void 0 ? void 0 : _a.bind(impl);\n        }\n      } else if (impl) {\n        return (_b = impl[prop]) === null || _b === void 0 ? void 0 : _b.bind(impl);\n      } else {\n        throw new CapacitorException(`\"${pluginName}\" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n      }\n    };\n\n    const createPluginMethodWrapper = prop => {\n      let remove;\n\n      const wrapper = (...args) => {\n        const p = loadPluginImplementation().then(impl => {\n          const fn = createPluginMethod(impl, prop);\n\n          if (fn) {\n            const p = fn(...args);\n            remove = p === null || p === void 0 ? void 0 : p.remove;\n            return p;\n          } else {\n            throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n          }\n        });\n\n        if (prop === 'addListener') {\n          p.remove = /*#__PURE__*/_asyncToGenerator(function* () {\n            return remove();\n          });\n        }\n\n        return p;\n      }; // Some flair âœ¨\n\n\n      wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;\n\n      Object.defineProperty(wrapper, 'name', {\n        value: prop,\n        writable: false,\n        configurable: false\n      });\n      return wrapper;\n    };\n\n    const addListener = createPluginMethodWrapper('addListener');\n    const removeListener = createPluginMethodWrapper('removeListener');\n\n    const addListenerNative = (eventName, callback) => {\n      const call = addListener({\n        eventName\n      }, callback);\n\n      const remove = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          const callbackId = yield call;\n          removeListener({\n            eventName,\n            callbackId\n          }, callback);\n        });\n\n        return function remove() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      const p = new Promise(resolve => call.then(() => resolve({\n        remove\n      })));\n      p.remove = /*#__PURE__*/_asyncToGenerator(function* () {\n        console.warn(`Using addListener() without 'await' is deprecated.`);\n        yield remove();\n      });\n      return p;\n    };\n\n    const proxy = new Proxy({}, {\n      get(_, prop) {\n        switch (prop) {\n          // https://github.com/facebook/react/issues/20030\n          case '$$typeof':\n            return undefined;\n\n          case 'toJSON':\n            return () => ({});\n\n          case 'addListener':\n            return pluginHeader ? addListenerNative : addListener;\n\n          case 'removeListener':\n            return removeListener;\n\n          default:\n            return createPluginMethodWrapper(prop);\n        }\n      }\n\n    });\n    Plugins[pluginName] = proxy;\n    registeredPlugins.set(pluginName, {\n      name: pluginName,\n      proxy,\n      platforms: new Set([...Object.keys(jsImplementations), ...(pluginHeader ? [platform] : [])])\n    });\n    return proxy;\n  };\n\n  const registerPlugin = ((_e = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _e === void 0 ? void 0 : _e.registerPlugin) || defaultRegisterPlugin; // Add in convertFileSrc for web, it will already be available in native context\n\n  if (!cap.convertFileSrc) {\n    cap.convertFileSrc = filePath => filePath;\n  }\n\n  cap.getPlatform = getPlatform;\n  cap.handleError = handleError;\n  cap.isNativePlatform = isNativePlatform;\n  cap.isPluginAvailable = isPluginAvailable;\n  cap.pluginMethodNoop = pluginMethodNoop;\n  cap.registerPlugin = registerPlugin;\n  cap.Exception = CapacitorException;\n  cap.DEBUG = !!cap.DEBUG;\n  cap.isLoggingEnabled = !!cap.isLoggingEnabled; // Deprecated props\n\n  cap.platform = cap.getPlatform();\n  cap.isNative = cap.isNativePlatform();\n  return cap;\n};\n\nconst initCapacitorGlobal = win => win.Capacitor = createCapacitor(win);\n\nconst Capacitor = /*#__PURE__*/initCapacitorGlobal(typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});\nconst registerPlugin = Capacitor.registerPlugin;\n/**\n * @deprecated Provided for backwards compatibility for Capacitor v2 plugins.\n * Capacitor v3 plugins should import the plugin directly. This \"Plugins\"\n * export is deprecated in v3, and will be removed in v4.\n */\n\nconst Plugins = Capacitor.Plugins;\n/**\n * Provided for backwards compatibility. Use the registerPlugin() API\n * instead, and provide the web plugin as the \"web\" implmenetation.\n * For example\n *\n * export const Example = registerPlugin('Example', {\n *   web: () => import('./web').then(m => new m.Example())\n * })\n *\n * @deprecated Deprecated in v3, will be removed from v4.\n */\n\nconst registerWebPlugin = plugin => legacyRegisterWebPlugin(Capacitor, plugin);\n/**\n * Base class web plugins should extend.\n */\n\n\nclass WebPlugin {\n  constructor(config) {\n    this.listeners = {};\n    this.windowListeners = {};\n\n    if (config) {\n      // TODO: add link to upgrade guide\n      console.warn(`Capacitor WebPlugin \"${config.name}\" config object was deprecated in v3 and will be removed in v4.`);\n      this.config = config;\n    }\n  }\n\n  addListener(eventName, listenerFunc) {\n    var _this = this;\n\n    const listeners = this.listeners[eventName];\n\n    if (!listeners) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push(listenerFunc); // If we haven't added a window listener for this event and it requires one,\n    // go ahead and add it\n\n    const windowListener = this.windowListeners[eventName];\n\n    if (windowListener && !windowListener.registered) {\n      this.addWindowListener(windowListener);\n    }\n\n    const remove = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* () {\n        return _this.removeListener(eventName, listenerFunc);\n      });\n\n      return function remove() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    const p = Promise.resolve({\n      remove\n    });\n    Object.defineProperty(p, 'remove', {\n      value: function () {\n        var _ref6 = _asyncToGenerator(function* () {\n          console.warn(`Using addListener() without 'await' is deprecated.`);\n          yield remove();\n        });\n\n        return function value() {\n          return _ref6.apply(this, arguments);\n        };\n      }()\n    });\n    return p;\n  }\n\n  removeAllListeners() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.listeners = {};\n\n      for (const listener in _this2.windowListeners) {\n        _this2.removeWindowListener(_this2.windowListeners[listener]);\n      }\n\n      _this2.windowListeners = {};\n    })();\n  }\n\n  notifyListeners(eventName, data) {\n    const listeners = this.listeners[eventName];\n\n    if (listeners) {\n      listeners.forEach(listener => listener(data));\n    }\n  }\n\n  hasListeners(eventName) {\n    return !!this.listeners[eventName].length;\n  }\n\n  registerWindowListener(windowEventName, pluginEventName) {\n    this.windowListeners[pluginEventName] = {\n      registered: false,\n      windowEventName,\n      pluginEventName,\n      handler: event => {\n        this.notifyListeners(pluginEventName, event);\n      }\n    };\n  }\n\n  unimplemented(msg = 'not implemented') {\n    return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);\n  }\n\n  unavailable(msg = 'not available') {\n    return new Capacitor.Exception(msg, ExceptionCode.Unavailable);\n  }\n\n  removeListener(eventName, listenerFunc) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const listeners = _this3.listeners[eventName];\n\n      if (!listeners) {\n        return;\n      }\n\n      const index = listeners.indexOf(listenerFunc);\n\n      _this3.listeners[eventName].splice(index, 1); // If there are no more listeners for this type of event,\n      // remove the window listener\n\n\n      if (!_this3.listeners[eventName].length) {\n        _this3.removeWindowListener(_this3.windowListeners[eventName]);\n      }\n    })();\n  }\n\n  addWindowListener(handle) {\n    window.addEventListener(handle.windowEventName, handle.handler);\n    handle.registered = true;\n  }\n\n  removeWindowListener(handle) {\n    if (!handle) {\n      return;\n    }\n\n    window.removeEventListener(handle.windowEventName, handle.handler);\n    handle.registered = false;\n  }\n\n}\n\nconst WebView = /*#__PURE__*/registerPlugin('WebView');\nexport { Capacitor, CapacitorException, CapacitorPlatforms, ExceptionCode, Plugins, WebPlugin, WebView, addPlatform, registerPlugin, registerWebPlugin, setPlatform }; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}